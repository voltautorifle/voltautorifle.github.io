Creating Cookies
To create a cookie, you assign it to JavaScript’s “cookie jar”, using the document.cookie property, like so:

Copy
document.cookie = 'name=Superman';
<< "name=Superman"
The document.cookie property acts like a special type of string. Assigning another cookie to it won’t overwrite the entire property, it will just append it to the end of the string. So we can add more cookies by assigning them to document.cookie:

Copy
document.cookie = 'hero=true';
<< "hero=true"

document.cookie = 'city=Metropolis';
<< "city=Metropolis"
Changing Cookie Values
A cookie’s value can be changed by reassigning it to document.cookie using the same name but a different value. The following code will update the value of two of the cookies that we set in the previous section:

Copy
document.cookie = 'name=Batman'
<< "name=Batman"
document.cookie = 'city=Gotham'
<< "city=Gotham"
Reading Cookies
To see the current contents of the cookie jar, simply enter document.cookie:

Copy
document.cookie:
<< "name=Batman; hero=true; city=Gotham"
We can use the split method to break the string into an array containing each name/value pair, then use a for of loop to iterate through the array:

Copy
const cookies = document.cookie.split("; ");
for (crumb of cookies){
    const [key,value] = crumb.split("=");
    console.log(`The value of ${key} is ${value}`);
}
<< The value of name is Batman
The value of hero is true
The value of city is Gotham
To see an example of cookies used in the wild, you can visit almost any website, open the browser console, and type document.cookie.

Cookie Expiry Dates
Cookies are session cookies by default. This means they are deleted once a browser session is finished (when the user closes the browser tab or window). Cookies can be made persistent ― that is, lasting beyond the browser session ― by adding "; expires=date" to the end of the cookie when it’s set, where date is a date value in the UTC String format Day, DD-Mon-YYYY HH:MM:SS GMT. The following example sets a cookie to expire in one day’s time:

Copy
const expiryDate = new Date(); 
const tomorrow = expiryDate.getTime() + 1000 * 60 * 60 * 24;
expiryDate.setTime(tomorrow);

document.cookie = `name=Batman; expires=${ expiryDate.toUTCString()}`;
An alternative is to set the max-age value. This takes a value in seconds, but it wasn’t supported in Internet Explorer before version 10:

Copy
document.cookie = 'name=Batman; max-age=86400' // 86400 secs = 1 day

The Path and Domain of Cookies
By default, cookies can only be read by pages inside the same directory and domain as the file was set. This is for security reasons so that access to the cookie is limited.

The path can be changed so that any page in the root directory can read the cookie. It’s done by adding the string ; path=/ to the end of the cookie when it is set:

Copy
document.cookie = 'name=Batman; path=/'
It’s also possible to set the domain by adding "; domain=domainName" to the end of the cookie:

Copy
document.cookie = 'name=Batman; domain=sitepoint.com';
A cookie can only be read by the domain that created it anyway, but doing this will allow all subdomains of sitepoint.com (such as javascript.sitepoint.com and books.sitepoint.com) to read it.

Secure Cookies
Adding the string ; secure to the end of a cookie will ensure it’s only transmitted over a secure HTTPS network:

Copy
document.cookie = 'name=Batman; secure';
Deleting Cookies
To remove a cookie, you need to set it to expire at a time in the past:

Copy
document.cookie = 'name=Batman; expires=Thu, 01 Jan 1970 00:00:01 GMT';
If a cookie is a session cookie, it will expire when the tab or window is closed.

Timing Functions
setTimeout()
The window object provides some useful methods for scheduling the execution of a function, and for repeatedly executing functions at regular intervals.

The window.setTimeout() method accepts a callback to a function as its first parameter and a number of milliseconds as its second parameter. Try entering the following example into a console. It should show an alert dialog after three seconds (that’s 3000 milliseconds):

Copy
window.setTimeout( () => alert("Time's Up!"), 3000);
<< 4
Notice that the method returns an integer. This is an ID used to reference that particular timeout. It can also cancel the timeout using the window.clearTimeout() method. Try calling the code again and make a note of the number that is returned:

Copy
window.setTimeout( () => alert("Time's Up!"), 3000);
<< 5
Now quickly enter the following code before the alert pops up, making sure that you enter the number that was returned previously (it might not be 5 in your case!):

Copy
window.clearTimeout(5);
<< undefined
If you were quick enough, and used the correct ID, the alert was prevented from happening.

setInterval()
The window.setInterval() method works in a similar way to window.setTimeout(), except that it will repeatedly invoke the callback function after every given number of milliseconds.

The previous example used an anonymous function, but it is also possible to use a named function like so:

Copy
function chant(){ console.log('Beetlejuice'); }
Now we can set up the interval and assign it to a variable:

Copy
const summon = window.setInterval(chant,1000);
<< 6
This should show the message “Beetlejuice” in the console every second (1,000 milliseconds).

To stop this, we can use the window.clearInterval() method and the variable repeat as an argument (this is because the window.setInterval() method returns its ID, so this will be assigned to the variable repeat):

Copy
window.clearInterval(summon);

