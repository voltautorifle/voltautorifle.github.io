One of the most significant features of HTML5 form controls is the ability to validate most user data without relying on JavaScript. This is done by using validation attributes on form elements. We've seen many of these earlier in the course, but to recap:
•	required: Specifies whether a form field needs to be filled in before the form can be submitted.
•	minlength and maxlength: Specifies the minimum and maximum length of textual data (strings)
•	min and max: Specifies the minimum and maximum values of numerical input types
•	type: Specifies whether the data needs to be a number, an email address, or some other specific preset type.
•	pattern: Specifies a regular expression that defines a pattern the entered data needs to follow.
•	Let's start with a simple example: an input that allows you to choose whether you prefer a banana or a cherry. This example involves a simple text <input> with an associated <label> and a submit <button>. Find the source code on GitHub at fruit-start.html and a live example below.
•	<form>
•	  <label for="choose">Would you prefer a banana or cherry?</label>
•	  <input id="choose" name="i_like">
•	  <button>Submit</button>
•	</form>
•	input:invalid {
•	  border: 2px dashed red;
•	}
•	
•	input:valid {
•	  border: 2px solid black;
•	}
•	The simplest HTML5 validation feature is the required attribute. To make an input mandatory, add this attribute to the element. When this attribute is set, the element matches the :required UI pseudo-class and the form won't submit, displaying an error message on submission when the input is empty. While empty, the input will also be considered invalid, matching the :invalid UI pseudo-class.
•	Add a required attribute to your input, as shown below.
•	<form>
•	  <label for="choose">Would you prefer a banana or cherry? (required)</label>
•	  <input id="choose" name="i_like" required>
•	  <button>Submit</button>
•	</form>
•	Copy to Clipboard
•	Note the CSS that is included in the example file:
•	input:invalid {
•	  border: 2px dashed red;
•	}
•	
•	input:invalid:required {
•	  background-image: linear-gradient(to right, pink, lightgreen);
•	}
•	
•	input:valid {
•	  border: 2px solid black;
•	}
A regular expression (regex) is a pattern that can be used to match character combinations in text strings, so regexps are ideal for form validation and serve a variety of other uses in JavaScript.
Regexps are quite complex, and we don't intend to teach you them exhaustively in this article. Below are some examples to give you a basic idea of how they work.
•	a — Matches one character that is a (not b, not aa, and so on).
•	abc — Matches a, followed by b, followed by c.
•	ab?c—Matches a, optionally followed by a single b, followed by c. ( ac or abc)
•	ab*c—Matches a, optionally followed by any number of bs, followed by c. ( ac , abc, abbbbbc, and so on).
•	a|b — Matches one character that is a or b.
•	abc|xyz — Matches exactly abc or exactly xyz (but not abcxyz or a or y, and so on).
•	<form>
•	  <label for="choose">Would you prefer a banana or a cherry?</label>
•	  <input id="choose" name="i_like" required pattern="[Bb]anana|[Cc]herry">
•	  <button>Submit</button>
•	</form>
You can constrain the character length of all text fields created by <input> or <textarea> by using the minlength and maxlength attributes. A field is invalid if it has a value and that value has fewer characters than the minlength value or more than the maxlength value.
For number fields (i.e. <input type="number">), the min and max attributes can be used to provide a range of valid values. If the field contains a value outside this range, it will be invalid.
<form>
  <div>
    <label for="choose">Would you prefer a banana or a cherry?</label>
    <input type="text" id="choose" name="i_like" required minlength="6" maxlength="6">
  </div>
  <div>
    <label for="number">How many would you like?</label>
    <input type="number" id="number" name="amount" value="1" min="1" max="10">
  </div>
  <div>
    <button>Submit</button>
  </div>
</form>
The Constraint validation API makes the following properties available on the above elements.
•	validationMessage: Returns a localized message describing the validation constraints that the control doesn't satisfy (if any). If the control is not a candidate for constraint validation (willValidate is false) or the element's value satisfies its constraints (is valid), this will return an empty string.
•	validity: Returns a ValidityState object that contains several properties describing the validity state of the element. You can find full details of all the available properties in the ValidityState reference page; below is listed a few of the more common ones:
o	patternMismatch: Returns true if the value does not match the specified pattern, and false if it does match. If true, the element matches the :invalid CSS pseudo-class.
o	tooLong: Returns true if the value is longer than the maximum length specified by the maxlength attribute, or false if it is shorter than or equal to the maximum. If true, the element matches the :invalid CSS pseudo-class.
o	tooShort: Returns true if the value is shorter than the minimum length specified by the minlength attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid CSS pseudo-class.
o	rangeOverflow: Returns true if the value is greater than the maximum specified by the max attribute, or false if it is less than or equal to the maximum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.
o	rangeUnderflow: Returns true if the value is less than the minimum specified by the min attribute, or false if it is greater than or equal to the minimum. If true, the element matches the :invalid and :out-of-range CSS pseudo-classes.
o	typeMismatch: Returns true if the value is not in the required syntax (when type is email or url), or false if the syntax is correct. If true, the element matches the :invalid CSS pseudo-class.
o	valid: Returns true if the element meets all its validation constraints, and is therefore considered to be valid, or false if it fails any constraint. If true, the element matches the :valid CSS pseudo-class; the :invalid CSS pseudo-class otherwise.
o	valueMissing: Returns true if the element has a required attribute, but no value, or false otherwise. If true, the element matches the :invalid CSS pseudo-class.
•	willValidate: Returns true if the element will be validated when the form is submitted; false otherwise.
The Constraint Validation API also makes the following methods available on the above elements and the form element.
•	checkValidity(): Returns true if the element's value has no validity problems; false otherwise. If the element is invalid, this method also fires an invalid event on the element.
•	reportValidity(): Reports invalid field(s) using events. Useful in combination with preventDefault() in an onSubmit event handler
•	setCustomValidity(message): Adds a custom error message to the element; if you set a custom error message, the element is considered to be invalid, and the specified error is displayed. This lets you use JavaScript code to establish a validation failure other than those offered by the standard HTML5 validation constraints. The message is shown to the user when reporting the problem.
•	 let's see how we can use this API to build some slightly more complex custom validation.
•	First, the HTML. Again, feel free to build this along with us:
•	<form novalidate>
•	  <p>
•	    <label for="mail">
•	      <span>Please enter an email address:</span>
•	      <input type="email" id="mail" name="mail" required minlength="8">
•	      <span class="error" aria-live="polite"></span>
•	    </label>
•	  </p>
•	  <button>Submit</button>
•	</form>
•	Copy to Clipboard
•	This simple form uses the novalidate attribute to turn off the browser's automatic validation; this lets our script take control over validation. However, this doesn't disable support for the constraint validation API nor the application of CSS pseudo-classes like :valid, etc. That means that even though the browser doesn't automatically check the validity of the form before sending its data, you can still do it yourself and style the form accordingly.
•	Our input to validate is an <input type="email">, which is required, and has a minlength of 8 characters. Let's check these using our own code, and show a custom error message for each one.
•	We are aiming to show the error messages inside a <span> element. The aria-live attribute is set on that <span> to make sure that our custom error message will be presented to everyone, including it being read out to screenreader users.
•	Now onto some basic CSS to improve the look of the form slightly, and provide some visual feedback when the input data is invalid:
•	body {
•	  font: 1em sans-serif;
•	  width: 200px;
•	  padding: 0;
•	  margin : 0 auto;
•	}
•	
•	p * {
•	  display: block;
•	}
•	
•	input[type=email]{
•	  -webkit-appearance: none;
•	  appearance: none;
•	
•	  width: 100%;
•	  border: 1px solid #333;
•	  margin: 0;
•	
•	  font-family: inherit;
•	  font-size: 90%;
•	
•	  box-sizing: border-box;
•	}
•	
•	/* This is our style for the invalid fields */
•	input:invalid{
•	  border-color: #900;
•	  background-color: #FDD;
•	}
•	
•	input:focus:invalid {
•	  outline: none;
•	}
•	
•	/* This is the style of our error messages */
•	.error {
•	  width  : 100%;
•	  padding: 0;
•	
•	  font-size: 80%;
•	  color: white;
•	  background-color: #900;
•	  border-radius: 0 0 5px 5px;
•	
•	  box-sizing: border-box;
•	}
•	
•	.error.active {
•	  padding: 0.3em;
•	}
•	Now lets look at the JavaScript that implements the custom error validation.
•	// There are many ways to pick a DOM node; here we get the form itself and the email
•	// input box, as well as the span element into which we will place the error message.
•	const form  = document.getElementsByTagName('form')[0];
•	
•	const email = document.getElementById('mail');
•	const emailError = document.querySelector('#mail + span.error');
•	
•	email.addEventListener('input', function (event) {
•	  // Each time the user types something, we check if the
•	  // form fields are valid.
•	
•	  if (email.validity.valid) {
•	    // In case there is an error message visible, if the field
•	    // is valid, we remove the error message.
•	    emailError.textContent = ''; // Reset the content of the message
•	    emailError.className = 'error'; // Reset the visual state of the message
•	  } else {
•	    // If there is still an error, show the correct error
•	    showError();
•	  }
•	});
•	
•	form.addEventListener('submit', function (event) {
•	  // if the email field is valid, we let the form submit
•	
•	  if(!email.validity.valid) {
•	    // If it isn't, we display an appropriate error message
•	    showError();
•	    // Then we prevent the form from being sent by canceling the event
•	    event.preventDefault();
•	  }
•	});
•	
•	function showError() {
•	  if(email.validity.valueMissing) {
•	    // If the field is empty,
•	    // display the following error message.
•	    emailError.textContent = 'You need to enter an e-mail address.';
•	  } else if(email.validity.typeMismatch) {
•	    // If the field doesn't contain an email address,
•	    // display the following error message.
•	    emailError.textContent = 'Entered value needs to be an e-mail address.';
•	  } else if(email.validity.tooShort) {
•	    // If the data is too short,
•	    // display the following error message.
•	    emailError.textContent = `Email should be at least ${ email.minLength } characters; you entered ${ email.value.length }.`;
•	  }
•	
•	  // Set the styling appropriately
•	  emailError.className = 'error active';
•	}
•	Every time we change the value of the input, we check to see if it contains valid data. If it has then we remove any error message being shown. If the data is not valid, we run showError() to show the appropriate error.
•	Every time we try to submit the form, we again check to see if the data is valid. If so, we let the form submit. If not, we run showError() to show the appropriate error, and stop the form submitting with preventDefault().
•	The showError() function uses various properties of the input's validity object to determine what the error is, and then displays an error message as appropriate.

•	the following is a simplified version of the previous example that works with legacy browsers.
•	The HTML is almost the same; we just removed the HTML validation features.
•	<form>
•	  <p>
•	    <label for="mail">
•	        <span>Please enter an email address:</span>
•	        <input type="text" id="mail" name="mail">
•	        <span class="error" aria-live="polite"></span>
•	    </label>
•	  </p>
•	  <!-- Some legacy browsers need to have the `type` attribute
•	       explicitly set to `submit` on the `button`element -->
•	  <button type="submit">Submit</button>
•	</form>
•	Similarly, the CSS doesn't need to change very much; we've just turned the :invalid CSS pseudo-class into a real class and avoided using the attribute selector that doesn't work on Internet Explorer 6.
•	body {
•	  font: 1em sans-serif;
•	  width: 200px;
•	  padding: 0;
•	  margin : 0 auto;
•	}
•	
•	form {
•	  max-width: 200px;
•	}
•	
•	p * {
•	  display: block;
•	}
•	
•	input.mail {
•	  -webkit-appearance: none;
•	
•	  width: 100%;
•	  border: 1px solid #333;
•	  margin: 0;
•	
•	  font-family: inherit;
•	  font-size: 90%;
•	
•	  box-sizing: border-box;
•	}
•	
•	/* This is our style for the invalid fields */
•	input.invalid{
•	  border-color: #900;
•	  background-color: #FDD;
•	}
•	
•	input:focus.invalid {
•	  outline: none;
•	}
•	
•	/* This is the style of our error messages */
•	.error {
•	  width  : 100%;
•	  padding: 0;
•	
•	  font-size: 80%;
•	  color: white;
•	  background-color: #900;
•	  border-radius: 0 0 5px 5px;
•	  box-sizing: border-box;
•	}
•	
•	.error.active {
•	  padding: 0.3em;
•	}
•	The big changes are in the JavaScript code, which needs to do much more heavy lifting.
•	// There are fewer ways to pick a DOM node with legacy browsers
•	const form  = document.getElementsByTagName('form')[0];
•	const email = document.getElementById('mail');
•	
•	// The following is a trick to reach the next sibling Element node in the DOM
•	// This is dangerous because you can easily build an infinite loop.
•	// In modern browsers, you should prefer using element.nextElementSibling
•	let error = email;
•	while ((error = error.nextSibling).nodeType != 1);
•	
•	// As per the HTML5 Specification
•	const emailRegExp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
•	
•	// Many legacy browsers do not support the addEventListener method.
•	// Here is a simple way to handle this; it's far from the only one.
•	function addEvent(element, event, callback) {
•	  let previousEventCallBack = element["on"+event];
•	  element["on"+event] = function (e) {
•	    const output = callback(e);
•	
•	    // A callback that returns `false` stops the callback chain
•	    // and interrupts the execution of the event callback.
•	    if (output === false) return false;
•	
•	    if (typeof previousEventCallBack === 'function') {
•	      output = previousEventCallBack(e);
•	      if(output === false) return false;
•	    }
•	  }
•	};
•	
•	// Now we can rebuild our validation constraint
•	// Because we do not rely on CSS pseudo-class, we have to
•	// explicitly set the valid/invalid class on our email field
•	addEvent(window, "load", function () {
•	  // Here, we test if the field is empty (remember, the field is not required)
•	  // If it is not, we check if its content is a well-formed e-mail address.
•	  const test = email.value.length === 0 || emailRegExp.test(email.value);
•	
•	  email.className = test ? "valid" : "invalid";
•	});
•	
•	// This defines what happens when the user types in the field
•	addEvent(email, "input", function () {
•	  const test = email.value.length === 0 || emailRegExp.test(email.value);
•	  if (test) {
•	    email.className = "valid";
•	    error.textContent = "";
•	    error.className = "error";
•	  } else {
•	    email.className = "invalid";
•	  }
•	});
•	
•	// This defines what happens when the user tries to submit the data
•	addEvent(form, "submit", function () {
•	  const test = email.value.length === 0 || emailRegExp.test(email.value);
•	
•	  if (!test) {
•	    email.className = "invalid";
•	    error.textContent = "I expect an e-mail, darling!";
•	    error.className = "error active";
•	
•	    // Some legacy browsers do not support the event.preventDefault() method
•	    return false;
•	  } else {
•	    email.className = "valid";
•	    error.textContent = "";
•	    error.className = "error";
•	  }
•	});
The fetch specification differs from jQuery.ajax() in the following significant ways:
•	The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. Instead, as soon as the server responds with headers, the Promise will resolve normally (with the ok property of the response set to false if the response isn’t in the range 200–299), and it will only reject on network failure or if anything prevented the request from completing.
•	fetch() won’t send cross-origin cookies unless you set the credentials init option. (Since April 2018. The spec changed the default credentials policy to same-origin. Firefox changed since 61.0b13.)

A basic fetch request is really simple to set up. Have a look at the following code:
fetch('http://example.com/movies.json')
  .then(response => response.json())
  .then(data => console.log(data));
Here we are fetching a JSON file across the network and printing it to the console. The simplest use of fetch() takes one argument — the path to the resource you want to fetch — and does not directly return the JSON response body but instead returns a promise that resolves with a Response object.
The Response object, in turn, does not directly contain the actual JSON response body but is instead a representation of the entire HTTP response. So, to extract the JSON body content from the Response object, we use the json() method, which returns a second promise that resolves with the result of parsing the response body text as JSON.
Fetch requests are controlled by the connect-src directive of Content Security Policy rather than the directive of the resources it's retrieving.

